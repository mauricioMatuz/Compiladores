
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CIN COMMA DEQUAL DISTINT DIVIDE ELSE ENDL EQUAL FOR GET GREATER GREATEREQUAL HASH ID IF INCLUDE INT LBLOCK LBRACKET LESS LESSEQUAL LGREATER LPAREN MINUS MINUSMINUS NAMESPACE NUMBER PLUS PLUSPLUS POINT PRINTF QUOTES RBLOCK RBRACKET RETURN RGREATER RPAREN SEMICOLON STD STRING TIMES USING VOID WHILEdeclaration : HASH INCLUDE LESS STD ID POINT ID GREATERvar_declaration : type_specifier ID SEMICOLON\n    | type_specifier ID COMMA ID SEMICOLON\n    | type_specifier ID EQUAL NUMBER SEMICOLON\n    | type_specifier ID EQUAL var SEMICOLON\n    var_declaration : type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INTtype_specifier : VOIDtype_specifier : STRINGfun_declaration : type_specifier ID LPAREN  RPAREN LBLOCK RBLOCKparams : param_listparams : VOIDparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDparam : type_specifier ID LBRACKET RBRACKETcompount_stmt : LBLOCK local_declarations statement_list RBLOCKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n    | compount_stmt\n    | selection_stmt\n    | iteration_stmt\n    | return_stmt\n    expression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONexpression_stmt : PRINTF LGREATER QUOTES ID QUOTES SEMICOLON\n    | PRINTF LGREATER QUOTES ID QUOTES LGREATER ENDL SEMICOLON\n    | PRINTF LGREATER STRING  SEMICOLON\n    | PRINTF LGREATER STRING  LGREATER ENDL SEMICOLON\n    | PRINTF LGREATER var SEMICOLON\n    | PRINTF LGREATER var LGREATER   ENDL SEMICOLON\n    | PRINTF LGREATER var  LGREATER var SEMICOLON\n    | PRINTF LGREATER var LGREATER  var LGREATER ENDL SEMICOLON\n    expression_stmt : CIN RGREATER var SEMICOLON\n    | CIN RGREATER var  RGREATER var SEMICOLON\n    | CIN POINT GET LPAREN RPAREN SEMICOLON\n    expression_stmt : ID PLUSPLUS\n    | PLUSPLUS ID\n    | ID MINUSMINUS\n    | MINUSMINUS ID\n    selection_stmt : IF LPAREN expression RPAREN statementselection_stmt : IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementiteration_stmt :\n    | FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement\n    | FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement\n    | FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var  RPAREN statement\n    | FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement\n    | FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var  RPAREN statement\n    return_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var EQUAL expressionexpression : simple_expressionvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS\n    | LESSEQUAL\n    | GREATER\n    | GREATEREQUAL\n    | DEQUAL\n    | DISTINT\n    | QUOTES\n    additive_expression : additive_expression addop termadditive_expression : termaddop : PLUS\n    | MINUS\n    term : term mulop factorterm : factormulop : \tTIMES\n    | DIVIDE\n    factor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERcall : ID LPAREN args RPARENargs : args_list\n    | empty\n    args_list : args_list COMMA expressionargs_list : expressionempty :'
    
_lr_action_items = {'HASH':([0,],[2,]),'$end':([1,9,],[0,-1,]),'INCLUDE':([2,],[3,]),'LESS':([3,],[4,]),'STD':([4,],[5,]),'ID':([5,7,],[6,8,]),'POINT':([6,],[7,]),'GREATER':([8,],[9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaration","S'",1,None,None,None),
  ('declaration -> HASH INCLUDE LESS STD ID POINT ID GREATER','declaration',8,'p_declaration','sintatico.py',14),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_1','sintatico.py',19),
  ('var_declaration -> type_specifier ID COMMA ID SEMICOLON','var_declaration',5,'p_var_declaration_1','sintatico.py',20),
  ('var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON','var_declaration',5,'p_var_declaration_1','sintatico.py',21),
  ('var_declaration -> type_specifier ID EQUAL var SEMICOLON','var_declaration',5,'p_var_declaration_1','sintatico.py',22),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','sintatico.py',28),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','sintatico.py',33),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','sintatico.py',38),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier_','sintatico.py',43),
  ('fun_declaration -> type_specifier ID LPAREN RPAREN LBLOCK RBLOCK','fun_declaration',6,'p_fun_declaration','sintatico.py',48),
  ('params -> param_list','params',1,'p_params_1','sintatico.py',53),
  ('params -> VOID','params',1,'p_params_2','sintatico.py',58),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','sintatico.py',63),
  ('param_list -> param','param_list',1,'p_param_list_2','sintatico.py',68),
  ('param_list -> empty','param_list',1,'p_param_list_3','sintatico.py',73),
  ('param -> type_specifier ID','param',2,'p_param_1','sintatico.py',78),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','sintatico.py',83),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','sintatico.py',88),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','sintatico.py',93),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','sintatico.py',98),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','sintatico.py',103),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','sintatico.py',108),
  ('statement -> expression_stmt','statement',1,'p_statement','sintatico.py',113),
  ('statement -> compount_stmt','statement',1,'p_statement','sintatico.py',114),
  ('statement -> selection_stmt','statement',1,'p_statement','sintatico.py',115),
  ('statement -> iteration_stmt','statement',1,'p_statement','sintatico.py',116),
  ('statement -> return_stmt','statement',1,'p_statement','sintatico.py',117),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','sintatico.py',123),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','sintatico.py',128),
  ('expression_stmt -> PRINTF LGREATER QUOTES ID QUOTES SEMICOLON','expression_stmt',6,'p_expression_stmt_3','sintatico.py',133),
  ('expression_stmt -> PRINTF LGREATER QUOTES ID QUOTES LGREATER ENDL SEMICOLON','expression_stmt',8,'p_expression_stmt_3','sintatico.py',134),
  ('expression_stmt -> PRINTF LGREATER STRING SEMICOLON','expression_stmt',4,'p_expression_stmt_3','sintatico.py',135),
  ('expression_stmt -> PRINTF LGREATER STRING LGREATER ENDL SEMICOLON','expression_stmt',6,'p_expression_stmt_3','sintatico.py',136),
  ('expression_stmt -> PRINTF LGREATER var SEMICOLON','expression_stmt',4,'p_expression_stmt_3','sintatico.py',137),
  ('expression_stmt -> PRINTF LGREATER var LGREATER ENDL SEMICOLON','expression_stmt',6,'p_expression_stmt_3','sintatico.py',138),
  ('expression_stmt -> PRINTF LGREATER var LGREATER var SEMICOLON','expression_stmt',6,'p_expression_stmt_3','sintatico.py',139),
  ('expression_stmt -> PRINTF LGREATER var LGREATER var LGREATER ENDL SEMICOLON','expression_stmt',8,'p_expression_stmt_3','sintatico.py',140),
  ('expression_stmt -> CIN RGREATER var SEMICOLON','expression_stmt',4,'p_expression_stmt_4','sintatico.py',146),
  ('expression_stmt -> CIN RGREATER var RGREATER var SEMICOLON','expression_stmt',6,'p_expression_stmt_4','sintatico.py',147),
  ('expression_stmt -> CIN POINT GET LPAREN RPAREN SEMICOLON','expression_stmt',6,'p_expression_stmt_4','sintatico.py',148),
  ('expression_stmt -> ID PLUSPLUS','expression_stmt',2,'p_expression_stmt_5','sintatico.py',154),
  ('expression_stmt -> PLUSPLUS ID','expression_stmt',2,'p_expression_stmt_5','sintatico.py',155),
  ('expression_stmt -> ID MINUSMINUS','expression_stmt',2,'p_expression_stmt_5','sintatico.py',156),
  ('expression_stmt -> MINUSMINUS ID','expression_stmt',2,'p_expression_stmt_5','sintatico.py',157),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','sintatico.py',163),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','sintatico.py',168),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','sintatico.py',173),
  ('iteration_stmt -> <empty>','iteration_stmt',0,'p_iteration_stmt1','sintatico.py',178),
  ('iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement','iteration_stmt',9,'p_iteration_stmt1','sintatico.py',179),
  ('iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement','iteration_stmt',10,'p_iteration_stmt1','sintatico.py',180),
  ('iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement','iteration_stmt',10,'p_iteration_stmt1','sintatico.py',181),
  ('iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement','iteration_stmt',10,'p_iteration_stmt1','sintatico.py',182),
  ('iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement','iteration_stmt',10,'p_iteration_stmt1','sintatico.py',183),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','sintatico.py',189),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','sintatico.py',194),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','sintatico.py',199),
  ('expression -> simple_expression','expression',1,'p_expression_2','sintatico.py',204),
  ('var -> ID','var',1,'p_var_1','sintatico.py',214),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','sintatico.py',219),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','sintatico.py',224),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','sintatico.py',229),
  ('relop -> LESS','relop',1,'p_relop','sintatico.py',234),
  ('relop -> LESSEQUAL','relop',1,'p_relop','sintatico.py',235),
  ('relop -> GREATER','relop',1,'p_relop','sintatico.py',236),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','sintatico.py',237),
  ('relop -> DEQUAL','relop',1,'p_relop','sintatico.py',238),
  ('relop -> DISTINT','relop',1,'p_relop','sintatico.py',239),
  ('relop -> QUOTES','relop',1,'p_relop','sintatico.py',240),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','sintatico.py',246),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','sintatico.py',251),
  ('addop -> PLUS','addop',1,'p_addop','sintatico.py',256),
  ('addop -> MINUS','addop',1,'p_addop','sintatico.py',257),
  ('term -> term mulop factor','term',3,'p_term_1','sintatico.py',263),
  ('term -> factor','term',1,'p_term_2','sintatico.py',268),
  ('mulop -> TIMES','mulop',1,'p_mulop','sintatico.py',273),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','sintatico.py',274),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','sintatico.py',280),
  ('factor -> var','factor',1,'p_factor_2','sintatico.py',285),
  ('factor -> call','factor',1,'p_factor_3','sintatico.py',290),
  ('factor -> NUMBER','factor',1,'p_factor_4','sintatico.py',295),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','sintatico.py',300),
  ('args -> args_list','args',1,'p_args','sintatico.py',305),
  ('args -> empty','args',1,'p_args','sintatico.py',306),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','sintatico.py',312),
  ('args_list -> expression','args_list',1,'p_args_list_2','sintatico.py',317),
  ('empty -> <empty>','empty',0,'p_empty','sintatico.py',322),
]
